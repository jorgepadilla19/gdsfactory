{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0fd5fd63-4798-4187-8315-f6112b7b4d7e",
   "metadata": {},
   "source": [
    "# Masks\n",
    "\n",
    "With gdsfactory you can easily go from components, to sweeps, to Masks. \n",
    "\n",
    "Lets start with a resistance sweep, where you change the resistance width to measure sheet resistance\n",
    "\n",
    "## Pack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "624be8bc-9d7f-40e8-9217-c0d9071471e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "gf.CONF.plotter = 'matplotlib'  # This notebook rendered with 'holoviews' exceeds the 100MB limit for github pages\n",
    "gf.clear_cache()\n",
    "\n",
    "sweep = [gf.components.resistance_sheet(width=width) for width in [1, 10, 100]]\n",
    "m = gf.pack(sweep)\n",
    "c = m[0]\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5a870bf-69d0-4088-83dc-c2a911bbdf70",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_te = gf.routing.add_fiber_single(gf.functions.rotate(gf.components.spiral_inner_io_fiber_single, 90))\n",
    "spiral_te.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "292aeb23-52b7-4b95-af3f-1218fcb3e60e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# which is equivalent to\n",
    "spiral_te = gf.compose(gf.routing.add_fiber_single, gf.functions.rotate90, gf.components.spiral_inner_io_fiber_single)\n",
    "c = spiral_te(length=10e3)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28642192-edaa-47de-a70c-0a6b1c60ec87",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "spiral_te = gf.compose(gf.routing.add_fiber_single, gf.functions.rotate90, gf.components.spiral_inner_io_fiber_single)\n",
    "sweep = [spiral_te(length=length) for length in [10e3, 20e3, 30e3]]\n",
    "m = gf.pack(sweep)\n",
    "c = m[0]\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de11e81e-fed1-49c1-b3b1-3f38ca1d7e4b",
   "metadata": {},
   "source": [
    "You can also add a `prefix` to each text label. For example `S` for the spirals at the `north-center`\n",
    "\n",
    "`text_rectangular` is DRC clean and is anchored on `nc` (north-center)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "163625c7-3446-43fb-9d79-21ba1b2ef84f",
   "metadata": {},
   "outputs": [],
   "source": [
    "text_metal3 = gf.partial(gf.components.text_rectangular_multi_layer, layers=(gf.LAYER.M3,))\n",
    "\n",
    "m = gf.pack(sweep, text=text_metal3, text_anchors=('nc',), text_prefix='s')\n",
    "c = m[0]\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67d3167c-9820-43a8-a8c3-d7db3f6bbb42",
   "metadata": {},
   "outputs": [],
   "source": [
    "text_metal2 = gf.partial(gf.components.text, layer=gf.LAYER.M2)\n",
    "\n",
    "m = gf.pack(sweep, text=text_metal2, text_anchors=('nc',), text_prefix='s')\n",
    "c = m[0]\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "202f96c4-3534-492d-beb1-739b75a0caa2",
   "metadata": {},
   "source": [
    "## Grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0510675-a6a0-48ab-868b-147548c9baa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "g = gf.grid(sweep)\n",
    "g.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef5c0177-ba7d-4763-bd19-25b094dcaaa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "gh = gf.grid(sweep, shape=(1, len(sweep)))\n",
    "gh.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1b19b3c-ef2a-4684-a961-057e71d057fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "ghymin = gf.grid(sweep, shape=(1, len(sweep)), align_y='ymin')\n",
    "ghymin.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c906630b-d340-4f1f-9b6a-c88c39205d9d",
   "metadata": {},
   "source": [
    "You can also add text labels to each element of the sweep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28809b6e-2fa1-4ee0-96f8-9efec4a4c871",
   "metadata": {},
   "outputs": [],
   "source": [
    "ghymin = gf.grid_with_text(sweep, shape=(1, len(sweep)), align_y='ymin', text=text_metal3)\n",
    "ghymin.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b997412-a382-4ec5-8161-0598ea6ee774",
   "metadata": {},
   "source": [
    "## Mask\n",
    "\n",
    "You can easily define a mask using `grid` and `pack`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60bcbcf0-503d-43b9-ac9f-6bd8a744cea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gdsfactory as gf\n",
    "\n",
    "text_metal3 = gf.partial(gf.components.text_rectangular_multi_layer, layers=(gf.LAYER.M3,))\n",
    "grid = gf.partial(gf.grid_with_text, text=text_metal3)\n",
    "pack = gf.partial(gf.pack, text=text_metal3)\n",
    "\n",
    "gratings_sweep = [gf.components.grating_coupler_elliptical(taper_angle=taper_angle) for taper_angle in [20, 30, 40]]\n",
    "gratings = grid(gratings_sweep, text=None)\n",
    "gratings.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e689a444-8af9-45f7-b068-2411a3c1277f",
   "metadata": {},
   "outputs": [],
   "source": [
    "gratings_sweep = [gf.components.grating_coupler_elliptical(taper_angle=taper_angle) for taper_angle in [20, 30, 40]]\n",
    "gratings_loss_sweep = [gf.components.grating_coupler_loss_fiber_single(grating_coupler=grating) for grating in gratings_sweep]\n",
    "gratings = grid(gratings_loss_sweep, shape=(1, len(gratings_loss_sweep)), spacing = (40,0))\n",
    "gratings.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d25e85bf-4b7d-4cbe-8b83-1f096438cd14",
   "metadata": {},
   "outputs": [],
   "source": [
    "sweep_resistance = [gf.components.resistance_sheet(width=width) for width in [1, 10, 100]]\n",
    "resistance = gf.pack(sweep_resistance)[0]\n",
    "resistance.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8080baf6-5426-4f0c-87e4-a4be3b1a455b",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_te = gf.compose(gf.routing.add_fiber_single, gf.functions.rotate90, gf.components.spiral_inner_io_fiber_single)\n",
    "sweep_spirals = [spiral_te(length=length) for length in [10e3, 20e3, 30e3]]\n",
    "spirals = gf.pack(sweep_spirals)[0]\n",
    "spirals.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "247f7734-9691-4e0b-92ab-27b6eb0d88f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = gf.pack([spirals, resistance, gratings])[0]\n",
    "mask.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09a22557-34bc-42fe-8fcc-31cd887a2ee5",
   "metadata": {},
   "source": [
    "As you can see you can define your mask in a single line.\n",
    "\n",
    "For more complex mask, you can also create a new cell to build up more complexity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e78cf725-1243-42c4-b945-f1ab4464080e",
   "metadata": {},
   "outputs": [],
   "source": [
    "@gf.cell\n",
    "def mask():\n",
    "    c = gf.Component()\n",
    "    c << gf.pack([spirals, resistance, gratings])[0]\n",
    "    c << gf.components.seal_ring(c.bbox)\n",
    "    return c\n",
    "\n",
    "c = mask(cache=False)\n",
    "c.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d7a73db-0d7b-446a-b43d-05e64d002bb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdspath = c.write_gds_with_metadata(gdsdir='extra')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b36c5ad4-e2de-4751-8d02-5f5510ee6346",
   "metadata": {},
   "outputs": [],
   "source": [
    "yaml_path = gdspath.with_suffix('.yml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "849dbc8a-d702-4163-bd33-68acf300928b",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels_path = gf.mask.write_labels(gdspath=gdspath, layer_label=(201, 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18d44fd2-b9d9-42a5-a563-c8eedf6fa723",
   "metadata": {},
   "outputs": [],
   "source": [
    "from omegaconf import OmegaConf\n",
    "\n",
    "mask_metadata = OmegaConf.load(yaml_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92de97d6-064b-45ea-91c5-c8125dba4bb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_metadata = tm = gf.mask.merge_test_metadata(labels_path=labels_path, mask_metadata=mask_metadata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60c84507-5366-4fa9-8fc8-8850ba344f15",
   "metadata": {},
   "outputs": [],
   "source": [
    "tm.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29417bda-84bd-44f2-b562-eead25e70645",
   "metadata": {},
   "source": [
    "```\n",
    "\n",
    "CSV labels  ------|\n",
    "                  |--> merge_test_metadata dict\n",
    "                  |\n",
    "YAML metatada  ---\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30a2031d-780d-4ea5-b2df-d06aa170b4c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_names = [s for s in test_metadata.keys() if s.startswith('spiral')]\n",
    "spiral_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec394506-143b-4831-ae38-06a1d8d5896b",
   "metadata": {},
   "outputs": [],
   "source": [
    "spiral_lengths = [test_metadata[spiral_name].info.length for spiral_name in spiral_names]\n",
    "spiral_lengths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef3bbdfc-026b-49a6-a5a9-b9c2c7142df5",
   "metadata": {},
   "outputs": [],
   "source": [
    "gc_names = [s for s in test_metadata.keys() if s.startswith('grating')]\n",
    "gc_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88fb84ba-b7fb-41e3-956c-b9fb55454f38",
   "metadata": {},
   "outputs": [],
   "source": [
    "gc_taper_angles = [test_metadata[name].full.taper_angle for name in gc_names]\n",
    "gc_taper_angles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61bd7817-ceb6-4560-8bcf-4854896c1ffa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
